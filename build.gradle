plugins {
	id 'dev.architectury.loom' version '1.11-SNAPSHOT'
	id 'maven-publish'
}

java {
	sourceCompatibility = JavaVersion.VERSION_21
	targetCompatibility = JavaVersion.VERSION_21
}

base {
	archivesName = project.archives_base_name
}

version = project.mod_version
group = project.maven_group

repositories {
	mavenCentral()

	// Add repositories to retrieve artifacts from in here.
	// You should only use this when depending on other mods because
	// Loom adds the essential maven repositories to download Minecraft and libraries from automatically.
	// See https://docs.gradle.org/current/userguide/declaring_repositories.html
	// for more information about repositories.

	maven { url = "https://maven.shedaniel.me/" }
	maven { url = "https://maven.neoforged.net/releases/" }
}

dependencies {
	// To change the versions see the gradle.properties file
	minecraft "com.mojang:minecraft:${project.minecraft_version}"
	mappings loom.layered {
		it.mappings("net.fabricmc:yarn:$project.yarn_mappings:v2")
		it.mappings("dev.architectury:yarn-mappings-patch-neoforge:$project.yarn_mappings_patch_neoforge_version")
	}
	neoForge "net.neoforged:neoforge:${project.forge_version}"

    modCompileOnly "me.shedaniel.cloth:cloth-config-neoforge:19.0.146"

	testImplementation 'org.junit.jupiter:junit-jupiter:5.13.4'
	testRuntimeOnly 'org.junit.platform:junit-platform-launcher'
}

test {
	useJUnitPlatform()
	environment "ALSOFT_LOGLEVEL", "3"
	workingDir project.buildDir
	testLogging {
		showStandardStreams = true
		exceptionFormat = 'full'
	}
}

loom {
	accessWidenerPath = file("src/main/resources/rsls.accesswidener")
	mixin {
		useLegacyMixinAp = true
	}
}

remapJar {
	useMixinAP = true
	atAccessWideners.add("rsls.accesswidener")
}

processResources {
	inputs.property "version", project.version

	filesMatching("META-INF/neoforge.mods.toml") {
		expand "version": project.version
	}
}

tasks.withType(JavaCompile).configureEach {
	// Minecraft 1.18 (1.18-pre2) upwards uses Java 17.
	it.options.release = 21
}

java {
	// Loom will automatically attach sourcesJar to a RemapSourcesJar task and to the "build" task
	// if it is present.
	// If you remove this line, sources will not be generated.
	withSourcesJar()
}

jar {
	from("LICENSE") {
		rename { "${it}_${project.archives_base_name}"}
	}
	manifest {
		attributes([
				"MixinConfigs": "rsls.mixins.json"
		])
	}
}

afterEvaluate {
	migrateMappings.configure {
		outputDir = project.file("src/main/java")
	}
}

// configure the maven publication
publishing {
	publications {
		mavenJava(MavenPublication) {
			from components.java
		}
	}

	// See https://docs.gradle.org/current/userguide/publishing_maven.html for information on how to set up publishing.
	repositories {
		// Add repositories to publish to here.
		// Notice: This block does NOT have the same function as the block in the top level.
		// The repositories here will be used for publishing your artifact, not for
		// retrieving dependencies.
	}
}
